/* eslint-disable @typescript-eslint/no-explicit-any */
import _ from 'lodash-es';
export function searchList(dataList, searchText, options) {
    searchText = searchText?.trim()?.toLowerCase() ?? '';
    if (searchText === '')
        return dataList;
    return dataList.filter((data) => {
        if (options?.searchParams && !_.isMatch(data, options?.searchParams))
            return false;
        if (searchText === '')
            return true;
        const safeKeys = Object.keys(data).filter((k) => {
            return ['string', 'number'].includes(typeof data[k]);
        });
        let safeObject = _.pick(data, safeKeys);
        if (options?.searchKeys?.length)
            safeObject = _.pick(safeObject, options.searchKeys);
        const searchFound = Object.values(safeObject).filter((value) => {
            return value.toString().toLowerCase().includes(searchText);
        });
        return searchFound.length > 0;
    });
}
export function isNullEmpty(val) {
    return val === null || val === undefined || val === '';
}
export function downloadBlob(data, type, fileName) {
    const blob = new Blob([data], { type });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
}
export function downloadExcel(records, fileName = 'file.csv') {
    //const content = 'data:text/csv;charset=utf-8,';
    const data = _.cloneDeep(records);
    const keys = Object.keys(data[0]);
    const header = keys.join(',');
    // escape comma in data
    data.forEach((row) => {
        Object.keys(row).forEach((key) => {
            if (typeof row[key] === 'string' && row[key]?.includes(',')) {
                row[key] = row[key].replace(/"/g, '');
                row[key] = `"${row[key]}"`;
            }
        });
    });
    const rows = data.map((row) => keys.map((key) => row?.[key] ?? '').join(','));
    const csv = [header, ...rows].join('\n');
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    link.click();
}
export function isMathExpression(str) {
    try {
        const arithmeticRegex = /^[\d\s()+\-*/.]+$/;
        if (arithmeticRegex.test(str)) {
            const temp = window.eval(str);
            return temp && temp !== '' && !isNaN(temp);
        }
        return false;
    }
    catch (err) {
        return false;
    }
}
export function parseJson(json) {
    try {
        return JSON.parse(json);
    }
    catch (e) {
        console.error('Error parsing JSON', e.stack);
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Jhc2Uvc3JjL3V0aWxzL21pc2MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELE9BQU8sQ0FBQyxNQUFNLFdBQVcsQ0FBQztBQUUxQixNQUFNLFVBQVUsVUFBVSxDQUN4QixRQUFlLEVBQ2YsVUFBa0IsRUFDbEIsT0FBMEQ7SUFFMUQsVUFBVSxHQUFHLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDckQsSUFBSSxVQUFVLEtBQUssRUFBRTtRQUFFLE9BQU8sUUFBUSxDQUFDO0lBRXZDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQzlCLElBQUksT0FBTyxFQUFFLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUVuRixJQUFJLFVBQVUsS0FBSyxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFbkMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUM5QyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeEMsSUFBSSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU07WUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXJGLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBc0IsRUFBRSxFQUFFO1lBQzlFLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxHQUFRO0lBQ2xDLE9BQU8sR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxFQUFFLENBQUM7QUFDekQsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBVSxFQUFFLElBQVksRUFBRSxRQUFnQjtJQUNyRSxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN4QyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ2IsQ0FBQyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ1YsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsT0FBYyxFQUFFLFFBQVEsR0FBRyxVQUFVO0lBQ2pFLGlEQUFpRDtJQUNqRCxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU5Qix1QkFBdUI7SUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDL0IsSUFBSSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUM1RCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3RDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQzdCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFekMsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV6QyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUN6QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEdBQVc7SUFDMUMsSUFBSSxDQUFDO1FBQ0gsTUFBTSxlQUFlLEdBQUcsbUJBQW1CLENBQUM7UUFDNUMsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDOUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QixPQUFPLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsSUFBWTtJQUNwQyxJQUFJLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUFDLE9BQU8sQ0FBTSxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCBfIGZyb20gJ2xvZGFzaC1lcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hMaXN0KFxuICBkYXRhTGlzdDogYW55W10sXG4gIHNlYXJjaFRleHQ6IHN0cmluZyxcbiAgb3B0aW9ucz86IHsgc2VhcmNoS2V5cz86IHN0cmluZ1tdOyBzZWFyY2hQYXJhbXM/OiBvYmplY3QgfVxuKSB7XG4gIHNlYXJjaFRleHQgPSBzZWFyY2hUZXh0Py50cmltKCk/LnRvTG93ZXJDYXNlKCkgPz8gJyc7XG4gIGlmIChzZWFyY2hUZXh0ID09PSAnJykgcmV0dXJuIGRhdGFMaXN0O1xuXG4gIHJldHVybiBkYXRhTGlzdC5maWx0ZXIoKGRhdGEpID0+IHtcbiAgICBpZiAob3B0aW9ucz8uc2VhcmNoUGFyYW1zICYmICFfLmlzTWF0Y2goZGF0YSwgb3B0aW9ucz8uc2VhcmNoUGFyYW1zKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHNlYXJjaFRleHQgPT09ICcnKSByZXR1cm4gdHJ1ZTtcblxuICAgIGNvbnN0IHNhZmVLZXlzID0gT2JqZWN0LmtleXMoZGF0YSkuZmlsdGVyKChrKSA9PiB7XG4gICAgICByZXR1cm4gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5jbHVkZXModHlwZW9mIGRhdGFba10pO1xuICAgIH0pO1xuXG4gICAgbGV0IHNhZmVPYmplY3QgPSBfLnBpY2soZGF0YSwgc2FmZUtleXMpO1xuICAgIGlmIChvcHRpb25zPy5zZWFyY2hLZXlzPy5sZW5ndGgpIHNhZmVPYmplY3QgPSBfLnBpY2soc2FmZU9iamVjdCwgb3B0aW9ucy5zZWFyY2hLZXlzKTtcblxuICAgIGNvbnN0IHNlYXJjaEZvdW5kID0gT2JqZWN0LnZhbHVlcyhzYWZlT2JqZWN0KS5maWx0ZXIoKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpID0+IHtcbiAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoVGV4dCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VhcmNoRm91bmQubGVuZ3RoID4gMDtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bGxFbXB0eSh2YWw6IGFueSkge1xuICByZXR1cm4gdmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkIHx8IHZhbCA9PT0gJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZEJsb2IoZGF0YTogQmxvYiwgdHlwZTogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZGF0YV0sIHsgdHlwZSB9KTtcbiAgY29uc3QgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGEuaHJlZiA9IHVybDtcbiAgYS5kb3dubG9hZCA9IGZpbGVOYW1lO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO1xuICBhLmNsaWNrKCk7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSk7XG4gIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZEV4Y2VsKHJlY29yZHM6IGFueVtdLCBmaWxlTmFtZSA9ICdmaWxlLmNzdicpIHtcbiAgLy9jb25zdCBjb250ZW50ID0gJ2RhdGE6dGV4dC9jc3Y7Y2hhcnNldD11dGYtOCwnO1xuICBjb25zdCBkYXRhID0gXy5jbG9uZURlZXAocmVjb3Jkcyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhWzBdKTtcbiAgY29uc3QgaGVhZGVyID0ga2V5cy5qb2luKCcsJyk7XG5cbiAgLy8gZXNjYXBlIGNvbW1hIGluIGRhdGFcbiAgZGF0YS5mb3JFYWNoKChyb3cpID0+IHtcbiAgICBPYmplY3Qua2V5cyhyb3cpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiByb3dba2V5XSA9PT0gJ3N0cmluZycgJiYgcm93W2tleV0/LmluY2x1ZGVzKCcsJykpIHtcbiAgICAgICAgcm93W2tleV0gPSByb3dba2V5XS5yZXBsYWNlKC9cIi9nLCAnJyk7XG4gICAgICAgIHJvd1trZXldID0gYFwiJHtyb3dba2V5XX1cImA7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IHJvd3MgPSBkYXRhLm1hcCgocm93KSA9PiBrZXlzLm1hcCgoa2V5KSA9PiByb3c/LltrZXldID8/ICcnKS5qb2luKCcsJykpO1xuICBjb25zdCBjc3YgPSBbaGVhZGVyLCAuLi5yb3dzXS5qb2luKCdcXG4nKTtcblxuICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2Nzdl0sIHsgdHlwZTogJ3RleHQvY3N2JyB9KTtcbiAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICBsaW5rLmhyZWYgPSB1cmw7XG4gIGxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZTtcbiAgbGluay5jbGljaygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNYXRoRXhwcmVzc2lvbihzdHI6IHN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IGFyaXRobWV0aWNSZWdleCA9IC9eW1xcZFxccygpK1xcLSovLl0rJC87XG4gICAgaWYgKGFyaXRobWV0aWNSZWdleC50ZXN0KHN0cikpIHtcbiAgICAgIGNvbnN0IHRlbXAgPSB3aW5kb3cuZXZhbChzdHIpO1xuICAgICAgcmV0dXJuIHRlbXAgJiYgdGVtcCAhPT0gJycgJiYgIWlzTmFOKHRlbXApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKc29uKGpzb246IHN0cmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pO1xuICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwYXJzaW5nIEpTT04nLCBlLnN0YWNrKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIl19